import java.util.*; 
class Product { 
    int id; 
    String name; 
    double price; 
    Product(int id, String name, double price) { 
        this.id = id; 
        this.name = name; 
        this.price = price; 
    } 
    @Override 
    public boolean equals(Object o) { 
        if (this == o) return true; 
        if (o == null || getClass() != o.getClass()) return false; 
        Product product = (Product) o; 
        return id == product.id; 
    } 
    @Override 
    public int hashCode() { 
        return Objects.hash(id); 
    } 
}  
class ShoppingCart { 
    private Map<Product, Integer> cartItems = new HashMap<>(); 
    private static final double TAX_RATE = 0.08; // 8% tax 
    public void addProduct(Product product, int quantity) { 
        cartItems.put(product, cartItems.getOrDefault(product, 0) + quantity); 
    } 
   
 
    public void removeProduct(Product product) { 
        cartItems.remove(product); 
    } 
    public void viewCart() { 
        if (cartItems.isEmpty()) { 
            System.out.println("Your cart is empty."); 
            return; 
        } 
        System.out.println("Cart Contents:"); 
        double subtotal = 0; 
        for (Map.Entry<Product, Integer> entry : cartItems.entrySet()) { 
            Product product = entry.getKey(); 
            int qty = entry.getValue(); 
            double itemTotal = product.price * qty; 
            subtotal += itemTotal; 
            System.out.printf("%d x %s - $%.2f each = $%.2f\n", qty, product.name, 
product.price, itemTotal); 
        } 
        double tax = subtotal * TAX_RATE; 
        double total = subtotal + tax; 
        System.out.printf("\nSubtotal: $%.2f", subtotal); 
        System.out.printf("\nTax (%.0f%%): $%.2f", TAX_RATE * 100, tax); 
        System.out.printf("\nTotal: $%.2f\n", total); 
    } 
    public boolean isEmpty() { 
        return cartItems.isEmpty(); 
    } 
    public Map<Product, Integer> getCartItems() { 
        return cartItems; 
   
 
    } 
} 
  
public class ShoppingCartApp { 
    private static List<Product> productList = new ArrayList<>(); 
    private static ShoppingCart cart = new ShoppingCart(); 
    private static Scanner scanner = new Scanner(System.in); 
    public static void main(String[] args) { 
        seedProducts(); 
        int choice; 
        do { 
            showMenu(); 
            choice = getIntInput("Choose an option: "); 
            switch (choice) { 
                case 1 -> listProducts(); 
                case 2 -> addToCart(); 
                case 3 -> removeFromCart(); 
                case 4 -> cart.viewCart(); 
                case 5 -> System.out.println("Thank you for shopping with us!"); 
                default -> System.out.println("Invalid choice. Please try again."); 
            } 
        } while (choice != 5); 
    } 
    private static void showMenu() { 
        System.out.println("\n=== Shopping Cart Menu ==="); 
        System.out.println("1. Browse Products"); 
        System.out.println("2. Add Product to Cart"); 
        System.out.println("3. Remove Product from Cart"); 
   
 
        System.out.println("4. View Cart and Checkout"); 
        System.out.println("5. Exit"); 
    } 
    private static void seedProducts() { 
        productList.add(new Product(1, "Laptop", 1200.00)); 
        productList.add(new Product(2, "Smartphone", 800.00)); 
        productList.add(new Product(3, "Headphones", 150.00)); 
        productList.add(new Product(4, "Monitor", 300.00)); 
        productList.add(new Product(5, "Keyboard", 75.00)); 
    } 
    private static void listProducts() { 
        System.out.println("\nAvailable Products:"); 
        for (Product product : productList) { 
            System.out.printf("%d. %s - $%.2f\n", product.id, product.name, product.price); 
        } 
    } 
    private static void addToCart() { 
        listProducts(); 
        int productId = getIntInput("Enter the product ID to add to cart: "); 
        Optional<Product> productOpt = productList.stream() 
                .filter(p -> p.id == productId) 
                .findFirst(); 
        if (productOpt.isPresent()) { 
            int quantity = getIntInput("Enter quantity: "); 
            if (quantity > 0) { 
                cart.addProduct(productOpt.get(), quantity); 
                System.out.println(quantity + " x " + productOpt.get().name + " added to cart."); 
            } else { 
   
 
                System.out.println("Quantity must be greater than 0."); 
            } 
        } else { 
            System.out.println("Product not found."); 
        } 
    } 
  
    private static void removeFromCart() { 
        if (cart.isEmpty()) { 
            System.out.println("Your cart is empty."); 
            return; 
        } 
        System.out.println("\nProducts in your cart:"); 
        int index = 1; 
        List<Product> productsInCart = new ArrayList<>(cart.getCartItems().keySet()); 
        for (Product product : productsInCart) { 
            System.out.printf("%d. %s (%d)\n", index++, product.name, 
cart.getCartItems().get(product)); 
        } 
        int choice = getIntInput("Enter the number of the product to remove: "); 
        if (choice >= 1 && choice <= productsInCart.size()) { 
            Product toRemove = productsInCart.get(choice - 1); 
            cart.removeProduct(toRemove); 
            System.out.println(toRemove.name + " removed from cart."); 
        } else { 
            System.out.println("Invalid selection."); 
        } 
    } 
    private static int getIntInput(String prompt) { 
   
 
        int value = -1; 
        while (true) { 
            System.out.print(prompt); 
            try { 
                value = Integer.parseInt(scanner.nextLine()); 
                return value; 
            } catch (NumberFormatException e) { 
                System.out.println("Please enter a valid number.");}}}} 
